[{"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\index.js":"1","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\App.js":"2","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Headers\\Headers.js":"3","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Footers\\Footer.js":"4","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Contact\\Contact.js":"5","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Register\\Register.js":"6","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Edit\\Edit.js":"7","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Profile\\Profile.js":"8","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Spiner\\Spiner.js":"9","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Main\\index.jsx":"10","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Signup\\index.jsx":"11","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Login\\index.jsx":"12","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\EmailVerify\\index.jsx":"13","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Navbar\\UnauthenticatedNav.js":"14","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Navbar\\AuthenticatedNav.js":"15","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Home1\\Home1.js":"16","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Home\\ItemList.js":"17","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\ForgotPassword\\index.jsx":"18","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\PasswordReset\\index.jsx":"19","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\SingleItem\\singleItem.js":"20","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\ItemSubList\\items.js":"21","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Navbar\\Navigation.js":"22","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\WelcomePage\\Welcome.js":"23","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\Admin\\Sidebar.js":"24","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\Admin\\Dashboard.js":"25","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\AdminPages\\Categories\\Categories.js":"26","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\AdminLogin\\index.jsx":"27","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\L&F Items\\Dashboard.js":"28","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\L&F Items\\UserDashboard.js":"29","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\L&F Items\\Sidebar.js":"30"},{"size":342,"mtime":1698425363950,"results":"31","hashOfConfig":"32"},{"size":3809,"mtime":1700890899804,"results":"33","hashOfConfig":"32"},{"size":775,"mtime":1700512500285,"results":"34","hashOfConfig":"32"},{"size":2126,"mtime":1700563304016,"results":"35","hashOfConfig":"32"},{"size":6333,"mtime":1700649760647,"results":"36","hashOfConfig":"32"},{"size":92915,"mtime":1700025198400,"results":"37","hashOfConfig":"32"},{"size":5365,"mtime":1698663546656,"results":"38","hashOfConfig":"32"},{"size":10979,"mtime":1700509478255,"results":"39","hashOfConfig":"32"},{"size":367,"mtime":1698425062653,"results":"40","hashOfConfig":"32"},{"size":430,"mtime":1700890124102,"results":"41","hashOfConfig":"32"},{"size":6439,"mtime":1700649029616,"results":"42","hashOfConfig":"32"},{"size":3419,"mtime":1700648963526,"results":"43","hashOfConfig":"32"},{"size":1193,"mtime":1700594556081,"results":"44","hashOfConfig":"32"},{"size":895,"mtime":1698641863105,"results":"45","hashOfConfig":"32"},{"size":1599,"mtime":1700905722546,"results":"46","hashOfConfig":"32"},{"size":8965,"mtime":1700447800904,"results":"47","hashOfConfig":"32"},{"size":4838,"mtime":1699199168804,"results":"48","hashOfConfig":"32"},{"size":1325,"mtime":1698681364052,"results":"49","hashOfConfig":"32"},{"size":1896,"mtime":1698686834376,"results":"50","hashOfConfig":"32"},{"size":1822,"mtime":1700741965531,"results":"51","hashOfConfig":"32"},{"size":787,"mtime":1700733464222,"results":"52","hashOfConfig":"32"},{"size":2342,"mtime":1700511902442,"results":"53","hashOfConfig":"32"},{"size":335,"mtime":1700593902851,"results":"54","hashOfConfig":"32"},{"size":4176,"mtime":1700851990196,"results":"55","hashOfConfig":"32"},{"size":4120,"mtime":1700916593491,"results":"56","hashOfConfig":"32"},{"size":1583,"mtime":1700622822479,"results":"57","hashOfConfig":"32"},{"size":3480,"mtime":1700852197709,"results":"58","hashOfConfig":"32"},{"size":5161,"mtime":1700912039503,"results":"59","hashOfConfig":"32"},{"size":6936,"mtime":1700912059660,"results":"60","hashOfConfig":"32"},{"size":5767,"mtime":1700889652377,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"vfll7t",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\index.js",[],[],["162"],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\App.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Headers\\Headers.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Footers\\Footer.js",["163","164","165","166"],[],"// Footer.js\r\n\r\nimport React from \"react\";\r\nimport \"./footer1.css\";\r\nimport \"./footer2.css\";\r\n\r\nconst Footer1 = () => {\r\n  return (\r\n    <footer className=\"footer1\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 mb-3\">\r\n            <div className=\"footer-section\">\r\n              <h2 className=\"text-uppercase mb-4\">Lost And Found System</h2>\r\n              <div className=\"social-icons\">\r\n                <a href=\"#\" className=\"me-3\">\r\n                  <i className=\"fab fa-facebook\"></i>\r\n                </a>\r\n                <a href=\"#\" className=\"me-3\">\r\n                  <i className=\"fab fa-twitter\"></i>\r\n                </a>\r\n                <a href=\"#\" className=\"me-3\">\r\n                  <i className=\"fab fa-github\"></i>\r\n                </a>\r\n                <a href=\"#\">\r\n                  <i className=\"fab fa-instagram\"></i>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"footer-section\">\r\n              <div className=\"contact-info\">\r\n                <p className=\"text-center mb-1\">\r\n                  <i className=\"fas fa-map-marker-alt me-2\"></i>\r\n                  Address : Barbaria, Moshpukur, Barasat\r\n                </p>\r\n                <p className=\"text-center mb-1\">\r\n                  <i className=\"fas fa-envelope me-2\"></i>\r\n                  Email : mohitofcl7@gmail.com\r\n                </p>\r\n                <p className=\"text-center mb-0\">\r\n                  <i className=\"fas fa-phone-alt me-2\"></i>\r\n                  Phone : +91 7003961588\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nconst Footer2 = () => {\r\n  return (\r\n    <footer className=\"footer2\">\r\n      <div className=\"text-center p-3\">\r\n        &copy; {new Date().getFullYear()} Lost And Found System\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      <Footer1 />\r\n      <Footer2 />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Contact\\Contact.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Register\\Register.js",["167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Select from \"react-select\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./register.css\";\r\n\r\n// ... (previous code)\r\n\r\nconst AddItem = () => {\r\n  const [cloudinaryImageUrl, setCloudinaryImageUrl] = useState(null);\r\n  const [inputData, setInputData] = useState({\r\n    itemName: \"\",\r\n    category: \"\",\r\n    description: \"\",\r\n    location: \"\",\r\n    image: \"\",\r\n    brand: \"\", // Add these fields\r\n    model: \"\", // Add these fields\r\n    color: \"\", // Add these fields\r\n    ram: \"\", // Add these fields\r\n    rom: \"\", // Add these fields\r\n  });\r\n\r\n  const [image, setImage] = useState(null);\r\n  const [preview, setPreview] = useState(null);\r\n  const fileInputRef = useRef(null);\r\n  const [additionalImages, setAdditionalImages] = useState(Array(4).fill(null));\r\n  const [additionalImagePreviews, setAdditionalImagePreviews] = useState([]);\r\n  const [additionalImageNames, setAdditionalImageNames] = useState(\r\n    Array(4).fill(\"\")\r\n  );\r\n\r\n  // Additional fields based on categories\r\n  const [color, setColor] = useState(\"\");\r\n  const [model, setModel] = useState(\"\");\r\n  const [brand, setBrand] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [cardType, setCardType] = useState(\"\");\r\n\r\n  const categoryOptions = [\r\n    { value: \"Watch\", label: \"Watch\" },\r\n    { value: \"Purse/Money Bag\", label: \"Purse/Money Bag\" },\r\n    { value: \"Cards\", label: \"Cards\" },\r\n    { value: \"Phone\", label: \"Phone\" },\r\n    { value: \"Phone Cover\", label: \"Phone Cover\" },\r\n    { value: \"Earphones\", label: \"Earphones\" },\r\n    { value: \"Books\", label: \"Books\" },\r\n    {\r\n      value: \"Keyboard/Mouse/Charger/Other Similar Gadgets\",\r\n      label: \"Keyboard/Mouse/Charger/Other Similar Gadgets\",\r\n    },\r\n    {\r\n      value: \"Glasses/Spectacles/Goggles\",\r\n      label: \"Glasses/Spectacles/Goggles\",\r\n    },\r\n    { value: \"Speakers\", label: \"Speakers\" },\r\n    { value: \"Lunch Box/Bottle\", label: \"Lunch Box/Bottle\" },\r\n    {\r\n      value: \"Pen Drive/USB/Similar Gadgets\",\r\n      label: \"Pen Drive/USB/Similar Gadgets\",\r\n    },\r\n    { value: \"Make-Up Kit\", label: \"Make-Up Kit\" },\r\n    {\r\n      value: \"Jewellery/Chains/Rings/Similar Items\",\r\n      label: \"Jewellery/Chains/Rings/Similar Items\",\r\n    },\r\n    { value: \"Outfit\", label: \"Outfit\" },\r\n    { value: \"Others\", label: \"Others\" },\r\n  ];\r\n\r\n  const typeOptions1 = [\r\n    { value: \"Lost\", label: \"Lost\" },\r\n    { value: \"Found\", label: \"Found\" },\r\n  ];\r\n\r\n  const typeOptions2 = [\r\n    { value: \"Analog\", label: \"Analog\" },\r\n    { value: \"Digital\", label: \"Digital\" },\r\n  ];\r\n\r\n  const debitCreditOptions = [\r\n    { value: \"Debit\", label: \"Debit\" },\r\n    { value: \"Credit\", label: \"Credit\" },\r\n  ];\r\n\r\n  const ramOptions = [\r\n    \"1 GB\",\r\n    \"2 GB\",\r\n    \"3 GB\",\r\n    \"4 GB\",\r\n    \"6 GB\",\r\n    \"8 GB\",\r\n    \"12 GB\",\r\n    \"16 GB\",\r\n    \"18 GB\",\r\n    \"24 GB\",\r\n  ];\r\n\r\n  const romOptions = [\r\n    \"4 GB\",\r\n    \"32 GB\",\r\n    \"64 GB\",\r\n    \"128 GB\",\r\n    \"256 GB\",\r\n    \"512 GB\",\r\n    \"1 TB\",\r\n  ];\r\n\r\n  const setInputValue = (e) => {\r\n    const { name, value } = e.target;\r\n    setInputData({ ...inputData, [name]: value });\r\n  };\r\n\r\n  const setCategoryValue = (selectedCategory) => {\r\n    setInputData({ ...inputData, category: selectedCategory.value });\r\n  };\r\n\r\n  const setProfile = async (e) => {\r\n    const file = e.target.files[0];\r\n    console.log(e.target.files[0]);\r\n    setImage(e.target.files[0]);\r\n\r\n    if (file) {\r\n      setImage(file);\r\n      const formData = new FormData();\r\n      formData.append(\"image\", file);\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://localhost:8080/api/upload\",\r\n          formData\r\n        );\r\n        console.log(\"Local Image Path:\", response.data.imagePath);\r\n        setCloudinaryImageUrl(response.data.imagePath); // Update state with the local image path\r\n      } catch (error) {\r\n        console.error(\"Error uploading image:\", error);\r\n        // Handle the error condition (e.g., show error message)\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if cloudinaryImageUrl is not null and other required fields are present\r\n    if (\r\n      cloudinaryImageUrl &&\r\n      inputData.itemName &&\r\n      inputData.category &&\r\n      inputData.description &&\r\n      inputData.location\r\n    ) {\r\n      submitItemData();\r\n    }\r\n  }, [cloudinaryImageUrl, inputData]);\r\n\r\n  const submitItemData = async () => {\r\n    // Use the latest value of cloudinaryImageUrl\r\n    const itemData = {\r\n      itemName: inputData.itemName,\r\n      category: inputData.category,\r\n      description: inputData.description,\r\n      location: inputData.location,\r\n      image: cloudinaryImageUrl,\r\n      color,\r\n      model,\r\n      brand,\r\n      type,\r\n      cardType,\r\n    };\r\n\r\n    try {\r\n      // Send a POST request to your backend API endpoint for item registration\r\n      const response = await axios.post(\r\n        \"http://localhost:8080/api/items\", // Update the URL to your item registration endpoint\r\n        itemData\r\n      );\r\n\r\n      // Handle success, e.g., show a success message\r\n      toast.success(\"Item has been successfully added.\");\r\n\r\n      // Reset the input data\r\n      setInputData({\r\n        itemName: \"\",\r\n        category: \"\",\r\n        description: \"\",\r\n        location: \"\",\r\n        brand: \"\",\r\n        model: \"\",\r\n        color: \"\",\r\n        ram: \"\",\r\n        rom: \"\",\r\n      });\r\n      setCloudinaryImageUrl(null);\r\n\r\n      // Clear the image and reset file input\r\n      setImage(null);\r\n      setPreview(null);\r\n      fileInputRef.current.value = \"\";\r\n\r\n      // ... (handle any other state resets or redirects as needed)\r\n    } catch (error) {\r\n      // Handle errors, e.g., show an error message\r\n      console.error(\"Item submission failed:\", error.message);\r\n      toast.error(\"Item submission failed. Please try again.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (image) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setPreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(image);\r\n    } else {\r\n      setPreview(null);\r\n    }\r\n  }, [image]);\r\n\r\n  const setAdditionalImage = (e, index) => {\r\n    const file = e.target.files[0];\r\n\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const updatedPreviews = [...additionalImagePreviews];\r\n        updatedPreviews[index] = reader.result;\r\n        setAdditionalImagePreviews(updatedPreviews);\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n\r\n      const updatedImages = [...additionalImages];\r\n      updatedImages[index] = file;\r\n      setAdditionalImages(updatedImages);\r\n\r\n      // Update the file name\r\n      const updatedNames = [...additionalImageNames];\r\n      updatedNames[index] = file.name;\r\n      setAdditionalImageNames(updatedNames);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"text-center mt-1\">Add Lost Or Found Item</h2>\r\n      <Card className=\"shadow mt-3 p-3\">\r\n        <Form>\r\n          {/* Basic Details section */}\r\n          <div className=\"basic-details-section\">\r\n            <h3 className=\"text-center\">Basic Details</h3>\r\n            <Row>\r\n              <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formItemName\">\r\n                <Form.Label>\r\n                  Item Name<span className=\"text-danger\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"itemName\"\r\n                  value={inputData.itemName}\r\n                  onChange={setInputValue}\r\n                  placeholder=\"Enter Item Name\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formCategory\">\r\n                <Form.Label>\r\n                  Category<span className=\"text-danger\">*</span>\r\n                </Form.Label>\r\n                <Select\r\n                  options={categoryOptions}\r\n                  value={categoryOptions.find(\r\n                    (option) => option.value === inputData.category\r\n                  )}\r\n                  onChange={setCategoryValue}\r\n                  placeholder=\"Select Category\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3\" controlId=\"formDescription\">\r\n                <Form.Label>\r\n                  Description<span className=\"text-danger\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                  name=\"description\"\r\n                  value={inputData.description}\r\n                  onChange={setInputValue}\r\n                  placeholder=\"Enter Item Description\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formLocation\">\r\n                <Form.Label>\r\n                  Item Lost / Found Location\r\n                  <span className=\"text-danger\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"location\"\r\n                  value={inputData.location}\r\n                  onChange={setInputValue}\r\n                  placeholder=\"Enter Location\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formItemType\">\r\n                <Form.Label className=\"d-block\">\r\n                  Item Type<span className=\"text-danger\">*</span>\r\n                </Form.Label>\r\n                <Select\r\n                  options={typeOptions1}\r\n                  value={typeOptions1.find(\r\n                    (option) => option.value === inputData.itemType\r\n                  )}\r\n                  onChange={(value) =>\r\n                    setInputData({ ...inputData, itemType: value.value })\r\n                  }\r\n                  placeholder=\"Select Item Type\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form encType=\"multipart/form-data\">\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formItemImage\">\r\n                  <Form.Label>\r\n                    Item Image<span className=\"text-danger\">*</span>\r\n                  </Form.Label>\r\n                  <div className=\"image-upload-container\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      name=\"image\"\r\n                      onChange={(e) => setProfile(e)} // Update onChange handler\r\n                      ref={fileInputRef} // Assign the ref to the file input\r\n                    />\r\n                    {preview && ( // Check for preview instead of image\r\n                      <div className=\"image-preview-box\">\r\n                        <h4>Image Preview</h4>\r\n                        <div className=\"image-preview-container\">\r\n                          <img\r\n                            src={preview}\r\n                            alt=\"Item Preview\"\r\n                            className=\"image-preview\"\r\n                          />\r\n                        </div>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"remove-item-button\"\r\n                          onClick={() => {\r\n                            setImage(null);\r\n                            setPreview(null);\r\n                            // Clear the value of the file input using the ref\r\n                            fileInputRef.current.value = \"\";\r\n                          }}\r\n                        >\r\n                          Remove Image\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </Form.Group>\r\n              </Form>\r\n            </Row>\r\n          </div>\r\n          {inputData.category /* Check if a category is selected */ && (\r\n            <hr className=\"divider\" /> /* Add a divider when a category is selected */\r\n          )}\r\n\r\n          {/* Watch Section Additional Details */}\r\n\r\n          {inputData.category === \"Watch\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color (If Any)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formModel\">\r\n                  <Form.Label>Model (If Any)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"model\"\r\n                    value={inputData.model}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand (If Any)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Select\r\n                    options={[\r\n                      { value: \"Analog\", label: \"Analog\" },\r\n                      { value: \"Digital\", label: \"Digital\" },\r\n                    ]}\r\n                    value={typeOptions2.find(\r\n                      (option) => option.value === inputData.type\r\n                    )}\r\n                    onChange={(value) =>\r\n                      setInputData({ ...inputData, type: value.value })\r\n                    }\r\n                    placeholder=\"Select Type\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Purse OR Money Bag Section Additional Details */}\r\n\r\n          {inputData.category === \"Purse/Money Bag\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formPurseBrand\"\r\n                >\r\n                  <Form.Label>Brand (If Any)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"purseBrand\"\r\n                    value={inputData.purseBrand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Purse/Money Bag Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formPurseModel\"\r\n                >\r\n                  <Form.Label>Model (If Any)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"purseModel\"\r\n                    value={inputData.purseModel}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Purse/Money Bag Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formPurseColor\"\r\n                >\r\n                  <Form.Label>Color (If Any)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"purseColor\"\r\n                    value={inputData.purseColor}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Purse/Money Bag Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Card Section Additional Details */}\r\n\r\n          {inputData.category === \"Cards\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"type\"\r\n                    value={inputData.type}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Type\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formDebitCredit\"\r\n                >\r\n                  <Form.Label>Debit/Credit</Form.Label>\r\n                  <Select\r\n                    options={debitCreditOptions}\r\n                    value={debitCreditOptions.find(\r\n                      (option) => option.value === inputData.debitCredit\r\n                    )}\r\n                    onChange={(value) =>\r\n                      setInputData({ ...inputData, debitCredit: value.value })\r\n                    }\r\n                    placeholder=\"Select Debit/Credit\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Phone Section Additional Details */}\r\n\r\n          {inputData.category === \"Phone\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formModel\">\r\n                  <Form.Label>Model</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"model\"\r\n                    value={inputData.model}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBackColor\">\r\n                  <Form.Label>Back Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"backColor\"\r\n                    value={inputData.backColor}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Back Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formRam\">\r\n                  <Form.Label>RAM</Form.Label>\r\n                  <Select\r\n                    options={[\r\n                      { value: \"1 GB\", label: \"1 GB\" },\r\n                      { value: \"2 GB\", label: \"2 GB\" },\r\n                      { value: \"3 GB\", label: \"3 GB\" },\r\n                      { value: \"4 GB\", label: \"4 GB\" },\r\n                      { value: \"6 GB\", label: \"6 GB\" },\r\n                      { value: \"8 GB\", label: \"8 GB\" },\r\n                      { value: \"12 GB\", label: \"12 GB\" },\r\n                      { value: \"16 GB\", label: \"16 GB\" },\r\n                      { value: \"18 GB\", label: \"18 GB\" },\r\n                      { value: \"24 GB\", label: \"24 GB\" },\r\n                    ]}\r\n                    value={ramOptions.find(\r\n                      (option) => option.value === inputData.type\r\n                    )}\r\n                    onChange={(value) =>\r\n                      setInputData({ ...inputData, type: value.value })\r\n                    }\r\n                    placeholder=\"Select RAM\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formRam\">\r\n                  <Form.Label>ROM</Form.Label>\r\n                  <Select\r\n                    options={[\r\n                      { value: \"4 GB\", label: \"4 GB\" },\r\n                      { value: \"32 GB\", label: \"32 GB\" },\r\n                      { value: \"64 GB\", label: \"64 GB\" },\r\n                      { value: \"128 GB\", label: \"128 GB\" },\r\n                      { value: \"256 GB\", label: \"256 GB\" },\r\n                      { value: \"512 GB\", label: \"512 GB\" },\r\n                      { value: \"1 TB\", label: \"1 TB\" },\r\n                    ]}\r\n                    value={romOptions.find(\r\n                      (option) => option.value === inputData.type\r\n                    )}\r\n                    onChange={(value) =>\r\n                      setInputData({ ...inputData, type: value.value })\r\n                    }\r\n                    placeholder=\"Select ROM\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Phone Cover Section Additional Details */}\r\n\r\n          {inputData.category === \"Phone Cover\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formCoverColor\"\r\n                >\r\n                  <Form.Label>Cover Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"coverColor\"\r\n                    value={inputData.coverColor}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Cover Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Earphones Section Additional Details */}\r\n\r\n          {inputData.category === \"Earphones\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formModel\">\r\n                  <Form.Label>Model</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"model\"\r\n                    value={inputData.model}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Books Section Additional Details */}\r\n\r\n          {inputData.category === \"Books\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formName\">\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={inputData.name}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Name\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formAuthor\">\r\n                  <Form.Label>Author</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"author\"\r\n                    value={inputData.author}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Author\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formPublisher\">\r\n                  <Form.Label>Publisher</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"publisher\"\r\n                    value={inputData.publisher}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Publisher\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formEdition\">\r\n                  <Form.Label>Edition</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"edition\"\r\n                    value={inputData.edition}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Edition\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Keyboard/Mouse/Similar Gadgets Section Additional Details */}\r\n\r\n          {inputData.category ===\r\n            \"Keyboard/Mouse/Charger/Other Similar Gadgets\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formGadgetName\"\r\n                >\r\n                  <Form.Label>Gadget Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"gadgetName\"\r\n                    value={inputData.gadgetName}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Gadget Name\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formModel\">\r\n                  <Form.Label>Model</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"model\"\r\n                    value={inputData.model}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Select\r\n                    options={[\r\n                      { value: \"Wired\", label: \"Wired\" },\r\n                      { value: \"Wireless\", label: \"Wireless\" },\r\n                    ]}\r\n                    value={\r\n                      inputData.type\r\n                        ? { value: inputData.type, label: inputData.type }\r\n                        : null\r\n                    }\r\n                    onChange={(selectedOption) =>\r\n                      setInputValue({\r\n                        target: { name: \"type\", value: selectedOption.value },\r\n                      })\r\n                    }\r\n                    placeholder=\"Select Type\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Glasses/Spectacles/Goggles Section Additional Details */}\r\n\r\n          {inputData.category === \"Glasses/Spectacles/Goggles\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formRimShape\">\r\n                  <Form.Label>Rim Shape</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"rimShape\"\r\n                    value={inputData.rimShape}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Rim Shape\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Speakers Section Additional Details */}\r\n\r\n          {inputData.category === \"Speakers\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formModel\">\r\n                  <Form.Label>Model</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"model\"\r\n                    value={inputData.model}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formShape\">\r\n                  <Form.Label>Shape</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"shape\"\r\n                    value={inputData.shape}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Shape\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formSize\">\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    value={inputData.size}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Size\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Lunch Box/Bottle Section Additional Details */}\r\n\r\n          {inputData.category === \"Lunch Box/Bottle\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formMaterial\">\r\n                  <Form.Label>Material</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"material\"\r\n                    value={inputData.material}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Material\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formShape\">\r\n                  <Form.Label>Shape</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"shape\"\r\n                    value={inputData.shape}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Shape\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formSize\">\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    value={inputData.size}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Size\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Pen Drive/USB/Similar Gadgets Section Additional Details */}\r\n\r\n          {inputData.category === \"Pen Drive/USB/Similar Gadgets\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formModel\">\r\n                  <Form.Label>Model</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"model\"\r\n                    value={inputData.model}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formShape\">\r\n                  <Form.Label>Shape</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"shape\"\r\n                    value={inputData.shape}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Shape\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formSize\">\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    value={inputData.size}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Size\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formMaterial\">\r\n                  <Form.Label>Material</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"material\"\r\n                    value={inputData.material}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Material\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Make-Up Kit Section Additional Details */}\r\n\r\n          {inputData.category === \"Make-Up Kit\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formShape\">\r\n                  <Form.Label>Shape</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"shape\"\r\n                    value={inputData.shape}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Shape\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formSize\">\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    value={inputData.size}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Size\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Jewellery/Chains/Rings/Similar Items Section Additional Details */}\r\n\r\n          {inputData.category === \"Jewellery/Chains/Rings/Similar Items\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formMaterial\">\r\n                  <Form.Label>Material</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"material\"\r\n                    value={inputData.material}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Material\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formSize\">\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    value={inputData.size}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Size\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formAge\">\r\n                  <Form.Label>Age</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"age\"\r\n                    value={inputData.age}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Age\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Outfit Section Additional Details */}\r\n\r\n          {inputData.category === \"Outfit\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formOutfitType\"\r\n                >\r\n                  <Form.Label>Outfit Type</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"outfitType\"\r\n                    value={inputData.outfitType}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Outfit Type\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formMaterial\">\r\n                  <Form.Label>Material</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"material\"\r\n                    value={inputData.material}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Material\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group\r\n                  className=\"mb-3 col-lg-6\"\r\n                  controlId=\"formDesignOrText\"\r\n                >\r\n                  <Form.Label>Design or Text</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"designOrText\"\r\n                    value={inputData.designOrText}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Design or Text\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formSize\">\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    value={inputData.size}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Size\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          {/* Others Section Additional Details */}\r\n\r\n          {inputData.category === \"Others\" && (\r\n            <div className=\"additional-details-section\">\r\n              <h3 className=\"text-center\">Additional Details</h3>\r\n              <Row>\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formBrand\">\r\n                  <Form.Label>Brand</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"brand\"\r\n                    value={inputData.brand}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Brand\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formModel\">\r\n                  <Form.Label>Model</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"model\"\r\n                    value={inputData.model}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Model\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formColor\">\r\n                  <Form.Label>Color</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"color\"\r\n                    value={inputData.color}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Color\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"type\"\r\n                    value={inputData.type}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Type\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formShape\">\r\n                  <Form.Label>Shape</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"shape\"\r\n                    value={inputData.shape}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Shape\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formMaterial\">\r\n                  <Form.Label>Material</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"material\"\r\n                    value={inputData.material}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Material\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formAge\">\r\n                  <Form.Label>Age</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"age\"\r\n                    value={inputData.age}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Age\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 col-lg-6\" controlId=\"formSize\">\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"size\"\r\n                    value={inputData.size}\r\n                    onChange={setInputValue}\r\n                    placeholder=\"Enter Size\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                {additionalImages.map((image, index) => (\r\n                  <Form.Group\r\n                    key={index}\r\n                    className=\"mb-3 col-lg-6\"\r\n                    controlId={`formAdditionalImage${index + 1}`}\r\n                  >\r\n                    <Form.Label>Additional Image {index + 1}</Form.Label>\r\n                    <div className=\"image-upload-container\">\r\n                      <Form.Control\r\n                        type=\"file\"\r\n                        onChange={(e) => setAdditionalImage(e, index)}\r\n                        ref={(ref) => (fileInputRef.current[index] = ref)}\r\n                      />\r\n                      {additionalImagePreviews[index] && (\r\n                        <div className=\"image-preview-box\">\r\n                          <h4>Image Preview</h4>\r\n                          <div className=\"image-preview-container\">\r\n                            <img\r\n                              src={additionalImagePreviews[index]}\r\n                              alt={`Additional Image ${index + 1}`}\r\n                              className=\"image-preview\"\r\n                            />\r\n                          </div>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"remove-item-button\"\r\n                            onClick={() => {\r\n                              const updatedImages = [...additionalImages];\r\n                              const updatedPreviews = [\r\n                                ...additionalImagePreviews,\r\n                              ];\r\n                              const updatedNames = [...additionalImageNames];\r\n\r\n                              updatedImages[index] = null;\r\n                              updatedPreviews[index] = null;\r\n                              updatedNames[index] = \"\";\r\n\r\n                              setAdditionalImages(updatedImages);\r\n                              setAdditionalImagePreviews(updatedPreviews);\r\n                              setAdditionalImageNames(updatedNames);\r\n\r\n                              // Reset the input value\r\n                              fileInputRef.current[index].value = \"\";\r\n                            }}\r\n                          >\r\n                            Remove Item\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                      {additionalImageNames[index] && (\r\n                        <p className=\"file-name\">\r\n                          {additionalImageNames[index]}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                ))}\r\n              </Row>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"d-flex justify-content-center\">\r\n            <Button variant=\"primary\" type=\"submit\" onClick={submitItemData}>\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Card>\r\n      <ToastContainer position=\"top-center\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddItem;\r\n","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Edit\\Edit.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Profile\\Profile.js",["190"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./profile.css\";\r\n\r\nconst Profile = () => {\r\n  const navigate = useNavigate();\r\n  const isAuthenticated = !!localStorage.getItem(\"token\"); // Check the user's authentication status\r\n\r\n  const [isEditable, setIsEditable] = useState(false);\r\n  const [userData, setUserData] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    // ... other fields you have in the database\r\n  });\r\n\r\n  // If the user is not authenticated, redirect them to the login page\r\n  // Inside the useEffect hook\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8080/api/userData\");\r\n        const data = await response.json();\r\n        setUserData(data); // Set the user data received from the API\r\n\r\n        // Also set the initial state of editedData here\r\n        setEditedData(data); // Set the same data for editedData initially\r\n      } catch (error) {\r\n        console.error(\"Error fetching user data:\", error);\r\n      }\r\n    };\r\n\r\n    if (isAuthenticated) {\r\n      fetchUserData();\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [isAuthenticated, navigate]);\r\n\r\n  const [editedData, setEditedData] = useState({ ...userData });\r\n\r\n  const handleFieldChange = (field, value) => {\r\n    const updatedData = {\r\n      ...editedData,\r\n      [field]: value,\r\n    };\r\n\r\n    setEditedData(updatedData);\r\n    console.log(\"Edited Data:\", updatedData); // Log the updatedData state\r\n  };\r\n\r\n  const updateUserProfile = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/api/updateProfile\", {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n        body: JSON.stringify(editedData), // Send editedData to update the profile\r\n      });\r\n\r\n      const responseData = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log(\"User data updated successfully\");\r\n\r\n        // Update the userData state to reflect the changes\r\n        setUserData({\r\n          ...userData,\r\n          ...editedData,\r\n        });\r\n\r\n        // Set isEditable to false to exit the edit mode\r\n        setIsEditable(false);\r\n      } else {\r\n        console.error(\"Failed to update user data:\", responseData.message);\r\n        // Handle specific error scenarios based on the response data\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating user data:\", error.message);\r\n      // Handle network failures or other exceptions here\r\n    }\r\n  };\r\n\r\n  const handleEditClick = () => {\r\n    setIsEditable(!isEditable); // Toggle the isEditable state\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card\">\r\n            <img src=\"./Mohit.jpg\" alt=\"Profile\" className=\"card-img-top\" />\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">Hi {`${userData.firstName}`} !</h5>\r\n              <p className=\"card-text\">Your Bio</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <h2 className=\"card-title\">My Profile</h2>\r\n              <form>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"nameInput\" className=\"form-label\">\r\n                    Name :\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"nameInput\"\r\n                    value={`${userData.firstName || \"\"} ${\r\n                      userData.lastName || \"\"\r\n                    }`}\r\n                    readOnly={!isEditable}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"addressInput\" className=\"form-label\">\r\n                    Address:\r\n                  </label>\r\n                  {isEditable ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"addressInput\"\r\n                      value={\r\n                        editedData.address || (userData ? userData.address : \"\")\r\n                      }\r\n                      onChange={(e) =>\r\n                        handleFieldChange(\"address\", e.target.value)\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"addressInput\"\r\n                      value={userData ? userData.address : \"\"}\r\n                      readOnly={!isEditable}\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"phoneNumberInput\" className=\"form-label\">\r\n                    Phone Number:\r\n                  </label>\r\n                  {isEditable ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"phoneNumberInput\"\r\n                      value={\r\n                        editedData.phoneNumber ||\r\n                        (userData ? userData.phoneNumber : \"\")\r\n                      }\r\n                      onChange={(e) =>\r\n                        handleFieldChange(\"phoneNumber\", e.target.value)\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"phoneNumberInput\"\r\n                      value={userData ? userData.phoneNumber : \"\"}\r\n                      readOnly={!isEditable}\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"emailInput\" className=\"form-label\">\r\n                    Email:\r\n                  </label>\r\n                  <input\r\n                    type=\"email\"\r\n                    className=\"form-control\"\r\n                    id=\"emailInput\"\r\n                    value={userData ? userData.email : \"\"}\r\n                    readOnly={!isEditable}\r\n                  />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"dobInput\" className=\"form-label\">\r\n                    Date Of Birth:\r\n                  </label>\r\n                  {isEditable ? (\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"form-control\"\r\n                      id=\"dobInput\"\r\n                      value={editedData.dob || (userData ? userData.dob : \"\")}\r\n                      onChange={(e) => handleFieldChange(\"dob\", e.target.value)}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"form-control\"\r\n                      id=\"dobInput\"\r\n                      value={userData ? userData.dob : \"\"}\r\n                      readOnly={!isEditable}\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"genderInput\" className=\"form-label\">\r\n                    Gender:\r\n                  </label>\r\n                  {isEditable ? (\r\n                    <select\r\n                      className=\"form-select\"\r\n                      id=\"genderInput\"\r\n                      value={\r\n                        editedData.gender || (userData ? userData.gender : \"\")\r\n                      }\r\n                      onChange={(e) =>\r\n                        handleFieldChange(\"gender\", e.target.value)\r\n                      }\r\n                    >\r\n                      <option value=\"Male\">Male</option>\r\n                      <option value=\"Female\">Female</option>\r\n                      <option value=\"Others\">Others</option>\r\n                      <option value=\"Prefer Not To Say\">\r\n                        Prefer Not To Say\r\n                      </option>\r\n                    </select>\r\n                  ) : (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"genderInput\"\r\n                      value={userData ? userData.gender : \"\"}\r\n                      readOnly={!isEditable}\r\n                      onChange={(e) =>\r\n                        handleFieldChange(\"gender\", e.target.value)\r\n                      }\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                  <label htmlFor=\"departmentInput\" className=\"form-label\">\r\n                    Department:\r\n                  </label>\r\n                  {isEditable ? (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"departmentInput\"\r\n                      value={\r\n                        editedData.department ||\r\n                        (userData ? userData.department : \"\")\r\n                      }\r\n                      onChange={(e) =>\r\n                        handleFieldChange(\"department\", e.target.value)\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"departmentInput\"\r\n                      value={userData ? userData.department : \"\"}\r\n                      readOnly={!isEditable}\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"text-center mt-3\">\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <div className=\"btn-container\">\r\n                      <a\r\n                        href=\"#\"\r\n                        className={`btn btn-primary ${\r\n                          isEditable ? \"slideRight\" : \"slideLeft\"\r\n                        }`}\r\n                        onClick={() => {\r\n                          handleEditClick();\r\n                          if (isEditable) {\r\n                            updateUserProfile(); // Call function to update user profile when Save Changes is clicked\r\n                          }\r\n                        }}\r\n                      >\r\n                        {isEditable ? \"Save Changes\" : \"Edit Profile\"}\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Spiner\\Spiner.js",[],[],["191"],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Main\\index.jsx",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Signup\\index.jsx",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Login\\index.jsx",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\EmailVerify\\index.jsx",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Navbar\\UnauthenticatedNav.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Navbar\\AuthenticatedNav.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Home1\\Home1.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\Home\\ItemList.js",["192","193","194"],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\ForgotPassword\\index.jsx",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\PasswordReset\\index.jsx",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\SingleItem\\singleItem.js",["195"],[],"import { Divider, dividerClasses } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport \"./singleItem.css\";\r\n\r\nconst Item = () => {\r\n  return (\r\n    <div className=\"cart_section\">\r\n      <div className=\"cart_container\">\r\n        <div className=\"left_cart\">\r\n          <img src=\"./img-8672.webp\" alt=\"cart_img\" />\r\n          <div className=\"cart_btn\">\r\n            <button className=\"cart_btn1\">Claim Item</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"right_cart\">\r\n          <h3>Apple Watch</h3>\r\n          <h4>Found It Near Staff Room !!!</h4>\r\n          <Divider  />\r\n          <p className=\"mrp\">Color : Black</p>\r\n          <p>\r\n            Brand : <span style={{ color: \"#B12704\" }}>Apple</span>\r\n          </p>\r\n          <p>\r\n            Model : <span style={{ color: \"#B12704\" }}>Apple Watch Series 9 GPS</span>\r\n          </p>\r\n\r\n          <div className=\"discount_box\">\r\n            <h5>\r\n              Item Type : <span style={{ color: \"#111\" }}>Found</span>\r\n            </h5>\r\n            <h4>\r\n              Posted By :{\" \"}\r\n              <span style={{ color: \"#111\", fontWeight: 600 }}>Dipok Adhikary</span>\r\n              \r\n            </h4>\r\n            {/* <p>\r\n              Fastest Delivery :{\" \"}\r\n              <span style={{ color: \"#111\" }}>Tomorrow 11 AM</span>\r\n            </p> */}\r\n          </div>\r\n          <p className=\"description\">\r\n            About The Item :{\" \"}\r\n            <span\r\n              style={{\r\n                color: \"#565959\",\r\n                fontSize: 14,\r\n                fontWeight: 500,\r\n                letterSpacing: \"0.4px\",\r\n              }}\r\n            >\r\n              The Watch Has A Scratch In It's Right Corner.\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\ItemSubList\\items.js",[],[],["196"],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\Navbar\\Navigation.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\WelcomePage\\Welcome.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\Admin\\Sidebar.js",["197","198","199","200","201","202","203","204","205"],[],"import React, { useState } from \"react\";\r\nimport Categories from \"../AdminPages/Categories/Categories\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nconst Sidebar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const toggleDropdown = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"adminToken\"); // Remove admin token\r\n    navigate(\"/\"); // Redirect to home after logout\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"col-md-3 col-lg-2 sidebar-offcanvas pl-0\"\r\n      id=\"sidebar\"\r\n      role=\"navigation\"\r\n      style={{ backgroundColor: \"#e9ecef\" }}\r\n    >\r\n      <ul className=\"nav flex-column sticky-top pl-0 pt-5 p-3 mt-3 \">\r\n        <li className=\"nav-item mb-2 mt-3\">\r\n          <a className=\"nav-link text-secondary\" href=\"#\">\r\n            <h5>Jacob Nejam</h5>\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item mb-2 \">\r\n          <Link to=\"/\" className=\"nav-link text-secondary\">\r\n            <i className=\"fas fa-user font-weight-bold\"></i>\r\n            <span className=\"ml-3\">Dashboard</span>\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item mb-2\">\r\n          <a\r\n            className=\"nav-link text-secondary\"\r\n            href=\"#\"\r\n            onClick={toggleDropdown}\r\n            aria-expanded={isOpen ? \"true\" : \"false\"}\r\n          >\r\n            <i className=\"far fa-file-word font-weight-bold\"></i>{\" \"}\r\n            <span className=\"ml-3\">Categories</span>\r\n          </a>\r\n          <div className={`collapse ${isOpen ? \"show\" : \"\"}`} id=\"submenu1\">\r\n            <ul className=\"nav flex-column pl-3\">\r\n              <li className=\"nav-item mb-2\">\r\n                <Link to=\"/catagories/add\" className=\"nav-link text-secondary\">\r\n                  <i class=\"fa-regular fa-circle\"></i>&nbsp; Add New\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item mb-2\">\r\n                <Link to=\"/catagories/list\" className=\"nav-link text-secondary\">\r\n                  <i class=\"fa-regular fa-circle\"></i>&nbsp; List\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <li class=\"nav-item mb-2\">\r\n            <Link to=\"/item\" class=\"nav-link text-secondary\">\r\n              <i class=\"far fa-chart-bar font-weight-bold\"></i>\r\n              <span className=\"ml-3\">Item</span>\r\n            </Link>\r\n          </li>\r\n          <li class=\"nav-item mb-2\">\r\n            <a class=\"nav-link text-secondary\" href=\"#\">\r\n              <i class=\"fas fa-file-export font-weight-bold\"></i>\r\n              <span className=\"ml-3\">Pages</span>\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mb-2\">\r\n            <a class=\"nav-link text-secondary\" href=\"#\">\r\n              <i class=\"fas fa-tablet-alt font-weight-bold\"></i>\r\n              <span className=\"ml-3\">Messages</span>\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mb-2\">\r\n            <a class=\"nav-link text-secondary\" href=\"#\">\r\n              <i class=\"fas fa-atom font-weight-bold\"></i>{\" \"}\r\n              <span className=\"ml-3\">Users</span>\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mb-2\">\r\n            <a class=\"nav-link text-secondary\" href=\"#\">\r\n              <i class=\"fa-solid fa-phone font-weight-bold\"></i>\r\n              <span className=\"ml-3\">Contact Information</span>\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mb-2\">\r\n            <a class=\"nav-link text-secondary\" href=\"#\">\r\n              <i class=\"fa-solid fa-gear font-weight-bold\"></i>{\" \"}\r\n              <span className=\"ml-3\">System Information</span>\r\n            </a>\r\n          </li>\r\n        </li>\r\n        {/* ... (other sidebar items) */}\r\n        <li className=\"nav-item mb-2\">\r\n          <a\r\n            className=\"nav-link text-secondary\"\r\n            href=\"#\"\r\n            onClick={handleLogout}\r\n          >\r\n            <i className=\"fa-solid fa-sign-out-alt font-weight-bold\"></i>{\" \"}\r\n            <span className=\"ml-3\">Logout</span>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\Admin\\Dashboard.js",["206","207"],[],"import { useEffect, useState } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [record, setRecord] = useState([]);\r\n\r\n  const getData = () => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((resposne) => resposne.json())\r\n      .then((res) => setRecord(res));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://jsonplaceholder.typicode.com/users\"\r\n        );\r\n        const data = await response.json();\r\n        setRecord(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div class=\"col main pt-5 mt-3\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol class=\"breadcrumb\">\r\n          <li class=\"breadcrumb-item\">\r\n            <a href=\"#\">Home</a>\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <p class=\"lead d-none d-sm-block\">Dashboard</p>\r\n      <div class=\"row mb-3\">\r\n        <div class=\"col-xl-3 col-sm-6 py-2\">\r\n          <div class=\"card bg-success text-white h-100\">\r\n            <div\r\n              class=\"card-body bg-success\"\r\n              style={{ backgroundColor: \"#57b960\" }}\r\n            >\r\n              <div class=\"rotate\">\r\n                <i class=\"fa-solid fa-box-open fa-4x\"></i>\r\n              </div>\r\n              <h6 class=\"text-uppercase\">Catagories </h6>\r\n              <p class=\"text-uppercase\">Active </p>\r\n              <h1 class=\"display-4\">134</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xl-3 col-sm-6 py-2\">\r\n          <div class=\"card text-white bg-danger h-100\">\r\n            <div class=\"card-body bg-danger\">\r\n              <div class=\"rotate\">\r\n                <i class=\"fa-solid fa-box-open fa-4x\"></i>\r\n              </div>\r\n              <h6 class=\"text-uppercase\">Catagories </h6>\r\n              <p class=\"text-uppercase\">inActive </p>\r\n              <h1 class=\"display-4\">134</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xl-3 col-sm-6 py-2\">\r\n          <div class=\"card text-white bg-info h-100\">\r\n            <div class=\"card-body bg-info\">\r\n              <div class=\"rotate\">\r\n                <i class=\"fa-solid fa-spinner fa-4x\"></i>\r\n              </div>\r\n              <h6 class=\"text-uppercase\">item entry</h6>\r\n              <p class=\"text-uppercase\">pending </p>\r\n              <h1 class=\"display-4\">125</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xl-3 col-sm-6 py-2\">\r\n          <div class=\"card text-white bg-warning h-100\">\r\n            <div class=\"card-body\">\r\n              <div class=\"rotate\">\r\n                <i class=\"fa-solid fa-check fa-4x\"></i>\r\n              </div>\r\n              <h6 class=\"text-uppercase\">item entry</h6>\r\n              <p class=\"text-uppercase\">published </p>\r\n              <h1 class=\"display-4\">125</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div class=\"row \">\r\n        <div class=\" col-sm-12\">\r\n          <h5 class=\"mt-3 mb-3 text-secondary\">\r\n            Check More Records of Employees\r\n          </h5>\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-striped\">\r\n              <thead class=\"thead-light\">\r\n                <tr>\r\n                  <th>No</th>\r\n                  <th>Label</th>\r\n                  <th>Header</th>\r\n                  <th>Column</th>\r\n                  <th>Record Data</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {record.slice(0, 5).map((output) => (\r\n                  <tr>\r\n                    <td>{output.id}</td>\r\n                    <td>{output.name}</td>\r\n                    <td>{output.email}</td>\r\n                    <td>{output.username}</td>\r\n                    <td>{output.website}</td>\r\n                    <td></td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\AdminPages\\Categories\\Categories.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\components\\AdminLogin\\index.jsx",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\L&F Items\\Dashboard.js",[],[],"C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\L&F Items\\UserDashboard.js",["208"],[],"import React from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  Pagination,\r\n} from \"react-bootstrap\";\r\nimport \"./userdashboard.css\";\r\nimport { bold } from \"colors\";\r\n\r\nconst UserDashboard = () => {\r\n  // Dummy data for cards\r\n  const items = [\r\n    { id: 1, name: \"Item 1\", location: \"Near ABC\", image: \"Arsola.jpg\" },\r\n    { id: 2, name: \"Item 2\", location: \"Near XYZ\", image: \"Arsola2.jpg\" },\r\n    { id: 3, name: \"Item 1\", location: \"Near ABC\", image: \"bluetooth.jpg\" },\r\n    { id: 4, name: \"Item 2\", location: \"Near XYZ\", image: \"earrings.jpg\" },\r\n    { id: 5, name: \"Item 1\", location: \"Near ABC\", image: \"headphones1.webp\" },\r\n    { id: 6, name: \"Item 2\", location: \"Near XYZ\", image: \"headphones2.webp\" },\r\n    { id: 7, name: \"Item 1\", location: \"Near ABC\", image: \"img-8672.webp\" },\r\n    { id: 8, name: \"Item 2\", location: \"Near XYZ\", image: \"item1.jpg\" },\r\n    { id: 9, name: \"Item 1\", location: \"Near ABC\", image: \"Mangekeyo.jpg\" },\r\n    { id: 10, name: \"Item 2\", location: \"Near XYZ\", image: \"phone1.webp\" },\r\n    { id: 11, name: \"Item 1\", location: \"Near ABC\", image: \"phone2.jpg\" },\r\n    { id: 12, name: \"Item 2\", location: \"Near XYZ\", image: \"PokPok.jpg\" },\r\n    { id: 13, name: \"Item 1\", location: \"Near ABC\", image: \"Ranjdeep.jpg\" },\r\n    { id: 14, name: \"Item 2\", location: \"Near XYZ\", image: \"Rinnegan.png\" },\r\n    { id: 15, name: \"Item 1\", location: \"Near ABC\", image: \"watch2.webp\" },\r\n    { id: 16, name: \"Item 2\", location: \"Near XYZ\", image: \"watch1.webp\" },\r\n    // ... More items\r\n  ];\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        {/* Sidebar */}\r\n        <Col md={3}>\r\n          {/* Filter options */}\r\n          <Form>\r\n            <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n              <Form.Label className=\"category-label\">Category</Form.Label>\r\n              <div>\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Watch\"\r\n                  name=\"filterOptions\"\r\n                  id=\"watch\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Purse/Money Bag\"\r\n                  name=\"filterOptions\"\r\n                  id=\"purse\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Cards\"\r\n                  name=\"filterOptions\"\r\n                  id=\"cards\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Phone\"\r\n                  name=\"filterOptions\"\r\n                  id=\"phone\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Phone Cover\"\r\n                  name=\"filterOptions\"\r\n                  id=\"phoneCover\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Earphones\"\r\n                  name=\"filterOptions\"\r\n                  id=\"earphones\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Books\"\r\n                  name=\"filterOptions\"\r\n                  id=\"books\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Keyboard/Mouse/Other Similar Gadgets\"\r\n                  name=\"filterOptions\"\r\n                  id=\"keyboard\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Charger\"\r\n                  name=\"filterOptions\"\r\n                  id=\"charger\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Glasses/Spectacles\"\r\n                  name=\"filterOptions\"\r\n                  id=\"glasses\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Speaker\"\r\n                  name=\"filterOptions\"\r\n                  id=\"speaker\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Lunch Box/Bottle\"\r\n                  name=\"filterOptions\"\r\n                  id=\"lunchBox\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Pen Drive/USB/Similar Gadgets\"\r\n                  name=\"filterOptions\"\r\n                  id=\"penDrive\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Make-up Kit\"\r\n                  name=\"filterOptions\"\r\n                  id=\"makeupKit\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Jewellery/Chains/Rings/Similar Items\"\r\n                  name=\"filterOptions\"\r\n                  id=\"jewellery\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Outfit\"\r\n                  name=\"filterOptions\"\r\n                  id=\"outfit\"\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label=\"Others\"\r\n                  name=\"filterOptions\"\r\n                  id=\"others\"\r\n                />\r\n              </div>\r\n            </Form.Group>\r\n          </Form>\r\n        </Col>\r\n\r\n        {/* Item List */}\r\n        <Col md={9}>\r\n          {/* Search bar and Add Item button */}\r\n          <Form className=\"mb-3\">\r\n            <Row>\r\n              <Col md={8}>\r\n                <Form.Control type=\"text\" placeholder=\"Search...\" />\r\n              </Col>\r\n              <Col md={4} className=\"text-right\">\r\n                <Button variant=\"primary\">Add Item</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n\r\n          {/* Display Cards */}\r\n          <Row>\r\n            {items.map((item) => (\r\n              <Col key={item.id} md={3} className=\"mb-3\">\r\n                <Card className=\"fixed-height-card\">\r\n                  <div\r\n                    className=\"card-image\"\r\n                    style={{ backgroundImage: `url(${item.image})` }}\r\n                  ></div>\r\n                  <Card.Body>\r\n                    <Card.Title>{item.name}</Card.Title>\r\n                    <Card.Text>{`Lost/Found it ${item.location}`}</Card.Text>\r\n                    <Button variant=\"primary\">View Item</Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n\r\n          {/* Pagination */}\r\n          <Row>\r\n            <Col className=\"text-center\">\r\n              <Pagination>\r\n                <Pagination.Prev />\r\n                <Pagination.Item active>{1}</Pagination.Item>\r\n                <Pagination.Item>{2}</Pagination.Item>\r\n                <Pagination.Item>{3}</Pagination.Item>\r\n                <Pagination.Next />\r\n              </Pagination>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserDashboard;\r\n","C:\\Users\\mohit\\Desktop\\VS Code\\LFS Recent\\frontend\\src\\pages\\L&F Items\\Sidebar.js",[],[],{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":16,"column":17,"nodeType":"213","endLine":16,"endColumn":46},{"ruleId":"211","severity":1,"message":"212","line":19,"column":17,"nodeType":"213","endLine":19,"endColumn":46},{"ruleId":"211","severity":1,"message":"212","line":22,"column":17,"nodeType":"213","endLine":22,"endColumn":46},{"ruleId":"211","severity":1,"message":"212","line":25,"column":17,"nodeType":"213","endLine":25,"endColumn":29},{"ruleId":"214","severity":1,"message":"215","line":39,"column":17,"nodeType":"216","messageId":"217","endLine":39,"endColumn":25},{"ruleId":"214","severity":1,"message":"218","line":40,"column":17,"nodeType":"216","messageId":"217","endLine":40,"endColumn":25},{"ruleId":"214","severity":1,"message":"219","line":41,"column":17,"nodeType":"216","messageId":"217","endLine":41,"endColumn":25},{"ruleId":"214","severity":1,"message":"220","line":42,"column":16,"nodeType":"216","messageId":"217","endLine":42,"endColumn":23},{"ruleId":"214","severity":1,"message":"221","line":43,"column":20,"nodeType":"216","messageId":"217","endLine":43,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":158,"column":6,"nodeType":"224","endLine":158,"endColumn":37,"suggestions":"225"},{"ruleId":"214","severity":1,"message":"226","line":177,"column":13,"nodeType":"216","messageId":"217","endLine":177,"endColumn":21},{"ruleId":"227","severity":1,"message":"228","line":446,"column":29,"nodeType":"213","endLine":450,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":555,"column":29,"nodeType":"213","endLine":559,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":661,"column":29,"nodeType":"213","endLine":665,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":808,"column":29,"nodeType":"213","endLine":812,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":889,"column":29,"nodeType":"213","endLine":893,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":989,"column":29,"nodeType":"213","endLine":993,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1111,"column":29,"nodeType":"213","endLine":1115,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1247,"column":29,"nodeType":"213","endLine":1251,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1347,"column":29,"nodeType":"213","endLine":1351,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1469,"column":29,"nodeType":"213","endLine":1473,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1591,"column":29,"nodeType":"213","endLine":1595,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1724,"column":29,"nodeType":"213","endLine":1728,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1835,"column":29,"nodeType":"213","endLine":1839,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":1946,"column":29,"nodeType":"213","endLine":1950,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":2074,"column":29,"nodeType":"213","endLine":2078,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":2229,"column":29,"nodeType":"213","endLine":2233,"endColumn":31},{"ruleId":"211","severity":1,"message":"212","line":278,"column":23,"nodeType":"213","endLine":289,"endColumn":24},{"ruleId":"209","replacedBy":"229"},{"ruleId":"214","severity":1,"message":"230","line":4,"column":8,"nodeType":"216","messageId":"217","endLine":4,"endColumn":16},{"ruleId":"214","severity":1,"message":"231","line":10,"column":10,"nodeType":"216","messageId":"217","endLine":10,"endColumn":17},{"ruleId":"214","severity":1,"message":"232","line":10,"column":19,"nodeType":"216","messageId":"217","endLine":10,"endColumn":33},{"ruleId":"214","severity":1,"message":"232","line":1,"column":19,"nodeType":"216","messageId":"217","endLine":1,"endColumn":33},{"ruleId":"209","replacedBy":"233"},{"ruleId":"214","severity":1,"message":"234","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":18},{"ruleId":"211","severity":1,"message":"212","line":27,"column":11,"nodeType":"213","endLine":27,"endColumn":59},{"ruleId":"211","severity":1,"message":"212","line":38,"column":11,"nodeType":"213","endLine":43,"endColumn":12},{"ruleId":"211","severity":1,"message":"212","line":68,"column":13,"nodeType":"213","endLine":68,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":74,"column":13,"nodeType":"213","endLine":74,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":80,"column":13,"nodeType":"213","endLine":80,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":86,"column":13,"nodeType":"213","endLine":86,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":92,"column":13,"nodeType":"213","endLine":92,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":100,"column":11,"nodeType":"213","endLine":104,"endColumn":12},{"ruleId":"214","severity":1,"message":"235","line":6,"column":9,"nodeType":"216","messageId":"217","endLine":6,"endColumn":16},{"ruleId":"211","severity":1,"message":"212","line":33,"column":13,"nodeType":"213","endLine":33,"endColumn":25},{"ruleId":"214","severity":1,"message":"236","line":12,"column":10,"nodeType":"216","messageId":"217","endLine":12,"endColumn":14},"no-new-object",["237"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'setColor' is assigned a value but never used.","Identifier","unusedVar","'setModel' is assigned a value but never used.","'setBrand' is assigned a value but never used.","'setType' is assigned a value but never used.","'setCardType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'submitItemData'. Either include it or remove the dependency array.","ArrayExpression",["238"],"'response' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["237"],"'Dropdown' is defined but never used.","'Divider' is defined but never used.","'dividerClasses' is defined but never used.",["237"],"'Categories' is defined but never used.","'getData' is assigned a value but never used.","'bold' is defined but never used.","no-object-constructor",{"desc":"239","fix":"240"},"Update the dependencies array to be: [cloudinaryImageUrl, inputData, submitItemData]",{"range":"241","text":"242"},[4596,4627],"[cloudinaryImageUrl, inputData, submitItemData]"]